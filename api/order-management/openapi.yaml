openapi: "3.0.3"
info:
  title: Order Management API
  description: API for managing orders and order items
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /orders:
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      summary: List all orders
      operationId: listAllOrders
      parameters:
        - name: limit
          in: query
          description: Maximum number of orders to return
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of orders to skip
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/{orderId}:
    get:
      summary: Get order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          description: The order ID
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update an order
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: The order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderRequest"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete an order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: The order ID
          schema:
            type: string
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/user/{userId}:
    get:
      summary: Get orders by user ID
      operationId: getOrdersByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: string
      responses:
        "200":
          description: List of user orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/{orderId}/items/{orderItemId}:
    delete:
      summary: Delete an order item
      operationId: deleteOrderItem
      parameters:
        - name: orderId
          in: path
          required: true
          description: The order ID
          schema:
            type: string
        - name: orderItemId
          in: path
          required: true
          description: The order item ID
          schema:
            type: string
      responses:
        "204":
          description: Order item deleted successfully
        "404":
          description: Order or order item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Order:
      type: object
      properties:
        order_id:
          type: string
          description: Unique identifier for the order
        user_id:
          type: string
          description: ID of the user who placed the order
        total_amount:
          type: number
          format: float
          description: Total amount of the order
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
          description: Current status of the order
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
          description: List of items in the order
        created_at:
          type: string
          format: date-time
          description: Timestamp when the order was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the order was last updated

    OrderItem:
      type: object
      properties:
        order_item_id:
          type: string
          description: Unique identifier for the order item
        order_id:
          type: string
          description: ID of the order this item belongs to
        product_id:
          type: string
          description: ID of the product
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the product
        price:
          type: number
          format: float
          description: Price of the product at the time of order

    CreateOrderRequest:
      type: object
      required:
        - user_id
        - items
      properties:
        user_id:
          type: string
          description: ID of the user placing the order
        total_amount:
          type: number
          format: float
          description: Total amount of the order
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
          default: pending
          description: Initial status of the order
        items:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/CreateOrderItemRequest"
          description: List of items to include in the order

    CreateOrderItemRequest:
      type: object
      required:
        - product_id
        - quantity
        - price
      properties:
        product_id:
          type: string
          description: ID of the product
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the product
        price:
          type: number
          format: float
          minimum: 0
          description: Price of the product

    UpdateOrderRequest:
      type: object
      properties:
        user_id:
          type: string
          description: ID of the user who owns the order
        total_amount:
          type: number
          format: float
          description: Updated total amount of the order
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
          description: Updated status of the order
        items:
          type: array
          items:
            $ref: "#/components/schemas/CreateOrderItemRequest"
          description: Updated list of items in the order

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
