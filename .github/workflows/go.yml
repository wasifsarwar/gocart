name: Go

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: gocart_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: go build ./...

      - name: Run Product Service tests with coverage
        working-directory: internal/product-service
        run: go test -v ./... -coverprofile=coverage.out -timeout=10m
        env:
          TEST_DB_HOST: localhost
          TEST_DB_USER: admin
          TEST_DB_PASSWORD: admin
          TEST_DB_NAME: gocart_db
          TEST_DB_PORT: 5432

      - name: Run User Service tests with coverage
        working-directory: internal/user-service
        run: go test -v ./... -coverprofile=coverage.out -timeout=10m
        env:
          TEST_DB_HOST: localhost
          TEST_DB_USER: admin
          TEST_DB_PASSWORD: admin
          TEST_DB_NAME: gocart_db
          TEST_DB_PORT: 5432

      - name: Run Order Management Service tests with coverage
        working-directory: internal/order-management-service
        run: go test -v ./... -coverprofile=coverage.out -timeout=10m
        env:
          TEST_DB_HOST: localhost
          TEST_DB_USER: admin
          TEST_DB_PASSWORD: admin
          TEST_DB_NAME: gocart_db
          TEST_DB_PORT: 5432

      - name: Generate Product Service coverage HTML
        working-directory: internal/product-service
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Generate User Service coverage HTML
        working-directory: internal/user-service
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            internal/product-service/coverage.html
            internal/user-service/coverage.html
            internal/product-service/coverage.out
            internal/user-service/coverage.out

      - name: Upload Product Service coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./internal/product-service/coverage.out
          flags: product-service
          name: product-service-coverage

      - name: Upload User Service coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./internal/user-service/coverage.out
          flags: user-service
          name: user-service-coverage
